(*some datasets used from:
	https://onlinecourses.science.psu.edu/stat501/node/325*)
open OUnit2
open Stats
open Eval
open Parse


let f1 () = second_poly_regression [(0.,0.)]
let f2 () = second_poly_regression [(0.,0.);(1.,1.)]
let f3 () = (second_poly_regression [])
let f4 () = (third_poly_regression [(0.,0.)])
let f5 () = (third_poly_regression [(0.,0.);(1.,1.)])
let f6 () = (third_poly_regression [(0.,0.);(1.,1.);(2.,2.)])
let f7 () = third_poly_regression []
let res () = residuals [(1.,67.)]


let tests = "test suite" >::: [
  "lin_reg_stats on y = x + 0" >:: (fun _ -> 
  	assert_equal [1.;0.;1.] 
  	(lin_reg_stats [(0.,0.);(1.,1.);(2.,2.);(3.,3.);(4.,4.);(5.,5.)]));

  "lin_reg_stats on y = x + 0" >:: (fun _ -> 
  	assert_equal [1.;0.;1.] 
  	(lin_reg_stats [(0.,0.);(1.,1.);(2.,2.);(3.,3.);(4.,4.);(5.,5.)]));

  "lin_reg_stats on y = x + 0" >:: (fun _ -> 
  	assert_equal [1.;0.;1.] 
  	(lin_reg_stats [(0.,0.);(1.,1.);(2.,2.);(3.,3.);(4.,4.);(5.,5.)]));

  "lin_reg_stats on y = -x - 1" >:: (fun _ -> 
  	assert_equal [-1.;-1.;1.] 
  	(lin_reg_stats [(0.,-1.);(1.,-2.);(2.,-3.);(3.,-4.);(4.,-5.);(5.,-6.)])); 

  "lin_reg_stats 5" >:: (fun _ ->
  	assert_equal [-4280.40590492049341; 236565.016380940098; 
  	0.0376366044711261144] 
  	(lin_reg_stats [(10.3,183800.);(10.3,183200.);(0.1,174900.);
  		(9.3,173500.);(8.4,172900.);(7.3,173200.);(8.4,173200.);(7.9,169700.);
  		(7.6,174500.);(7.6,177900.);(6.9,188100.);(7.4,203200.);(8.1,230200.);
  		(7.,258200.);(6.5,309800.);(5.8,329800.)]));

	"second poly 1" >:: (fun _ -> assert_equal
		([-1.11332043565491286e-05; 0.00642396102034968608; 
			6.01263800515907132])
		(second_poly_regression [(80.,6.47);(40.,6.24);(-40.,5.72);(-120.,5.09);
			(-200.,4.30);(-280.,3.33)]));

	"second poly 2" >:: (fun _ -> assert_equal
		([0.00112162493863526835; -0.159834315169341323; 8.15444280805081689])
		(second_poly_regression [(50.,3.3);(50.,2.8);(50.,2.9);(70.,2.3);
			(70.,2.6);(70.,2.1);(80.,2.5);(80.,2.9);(80.,2.4)
			;(90.,3.0);(90.,3.1);(90.,2.8);(100.,3.3);(100.,3.35);
			(100.,3.30)]));

	"second poly 3" >:: (fun _ -> assert_equal
		([-4.71866478690208169; 54.0493119132988795; 13.6223761618002754])
		(second_poly_regression [(1.,67.);(1.,62.);(2.,109.);(2.,83.);
			(2.,91.);(2.,88.);(3.,137.);(3.,131.);(3.,122.);(3.,122.);
			(3.,118.);(3.,115.);(3.,131.);(3.,143.);(3.,142.);(2.,123.);
			(3.,122.);(4.,138.);(4.,135.);(4.,146.);(4.,146.);(4.,145.);
			(4.,145.);(4.,144.);(4.,140.);(4.,150.);(4.,152.);(4.,157.);
			(4.,155.);(4.,153.);(4.,154.);(4.,158.);(4.,162.);(4.,161.);
			(4.,162.);(4.,165.);(4.,171.);(5.,171.);(4.,162.);(4.,169.);
			(4.,167.);(5.,188.);(2.,100.);(2.,109.);(4.,150.);(3.,140.);
			(4.,170.);(3.,150.);(4.,140.);(4.,140.);(4.,150.);(4.,150.);
			(3.,140.);(3.,150.);(3.,150.);(4.,150.);(4.,160.);(3.,140.);
			(4.,150.);(5.,170.);(4.,150.);(5.,150.);(4.,150.);(4.,150.);
			(3.,150.);(5.,150.);(5.,160.);(4.,140.);(5.,160.);(3.,130.);
			(4.,160.);(3.,130.);(4.,170.);(6.,170.);(4.,160.);(5.,180.);
			(4.,160.);(4.,170.)]));

 	"second poly 4" >:: (fun _ -> assert_raises
		(Illegal)
		f1);

 	"second poly 5" >:: (fun _ -> assert_raises
		(Illegal)
		f2); 

	"second poly 6" >:: (fun _ -> assert_equal
		([0.; 1.; 0.])
		(second_poly_regression [(0.,0.);(1.,1.);(2.,2.)]));

	"second poly 7" >:: (fun _ -> assert_equal
		([-1.; 2.; 0.])
		(second_poly_regression [(0.,0.);(1.,1.);(2.,0.)]));

 	"second poly 8" >:: (fun _ -> assert_raises
		(Illegal)
		f3); 

	"third poly 1" >:: (fun _ -> assert_equal
		([1.20078258710759356e-08; -7.47737375943798716e-06; 
		0.00647738934080294843; 5.99288006621324243])
		(third_poly_regression [(80.,6.47);(40.,6.24);(-40.,5.72);(-120.,5.09);
			(-200.,4.30);(-280.,3.33)]));

	"third poly 2" >:: (fun _ -> assert_equal
		([-3.10272577367376456e-05; 0.00813634426523179854; 
		-0.671176329828540474; 20.0957793308334658])
		(third_poly_regression [(50.,3.3);(50.,2.8);(50.,2.9);(70.,2.3);
		(70.,2.6);(70.,2.1);(80.,2.5);(80.,2.9);(80.,2.4);
		(90.,3.0);(90.,3.1);(90.,2.8);(100.,3.3);(100.,3.35);(100.,3.30)]));

	"third poly 3" >:: (fun _ -> assert_equal
		([0.127887429503516614; -6.03576240736219916; 
		58.1936045216571074; 9.8100869241025066])
		(third_poly_regression [(1.,67.);(1.,62.);(2.,109.);(2.,83.);
			(2.,91.);(2.,88.);(3.,137.);(3.,131.);(3.,122.);(3.,122.);
			(3.,118.);(3.,115.);(3.,131.);(3.,143.);(3.,142.);(2.,123.);
			(3.,122.);(4.,138.);(4.,135.);(4.,146.);(4.,146.);(4.,145.);
			(4.,145.);(4.,144.);(4.,140.);(4.,150.);(4.,152.);(4.,157.);
			(4.,155.);(4.,153.);(4.,154.);(4.,158.);(4.,162.);(4.,161.);
			(4.,162.);(4.,165.);(4.,171.);(5.,171.);(4.,162.);(4.,169.);
			(4.,167.);(5.,188.);(2.,100.);(2.,109.);(4.,150.);(3.,140.);
			(4.,170.);(3.,150.);(4.,140.);(4.,140.);(4.,150.);(4.,150.);
			(3.,140.);(3.,150.);(3.,150.);(4.,150.);(4.,160.);(3.,140.);
			(4.,150.);(5.,170.);(4.,150.);(5.,150.);(4.,150.);(4.,150.);
			(3.,150.);(5.,150.);(5.,160.);(4.,140.);(5.,160.);(3.,130.);
			(4.,160.);(3.,130.);(4.,170.);(6.,170.);(4.,160.);(5.,180.);
			(4.,160.);(4.,170.)]));

	"third poly 4" >:: (fun _ -> assert_raises
		(Illegal)
		f4);

	"third poly 5" >:: (fun _ -> assert_raises
		(Illegal)
		f5);

	"third poly 6" >:: (fun _ -> assert_raises
		(Illegal)
		f6);

	"third poly 7" >:: (fun _ -> assert_equal
		([7.10542735760100186e-15; 0.; 0.999999999999971578; 
		3.55271367880050093e-15])
		(third_poly_regression [(0.,0.);(1.,1.);(2.,2.);(3.,3.)]));

	"third poly 8" >:: (fun _ -> assert_raises
		(Illegal)
		f7);

	"third poly 9" >:: (fun _ -> assert_equal
		([6.70069188658806159e-06; -0.000426272989416887071; 
		0.974418046880487;1.39775183882238707])
		(third_poly_regression [(1.38628102255902297, 2.65055761863961);                                          
			(9.0569758930562223, 10.160924162738997);                                      
		   (30.4088708209103551, 30.9960752038184637);
		   (32.4381010467071818, 33.5465313148249464);
		   (44.8072260858533653, 44.2594052943943765);
		   (47.1621524828998773, 46.5021479310392465);
		   (78.2891303209086, 79.3776589520464881);
		   (80.556444297261578, 79.7153267944723751);
		   (85.3384792749803722, 86.0474178138723289);
		   (96.161934211264537, 96.8538847482382153)]));

	"residuals 1" >:: (fun _ -> assert_equal
		([0.; 0.; 0.; 0.; 0.; 0.])
		(residuals [(0.,0.);(1.,1.);(2.,2.);(3.,3.);(4.,4.);(5.,5.)]));

	"poisson 1" >:: (fun _ -> assert_equal
		0.140374367929487265
		(poisson 5. 3));

	"poisson 2" >:: (fun _ -> assert_equal
		0.367879688626631562
		(poisson 1. 0));

	"poissonc 1" >:: (fun _ -> assert_equal
		0.676677326520136901		
		(poissonc 2. 2));

	"poissonc 2" >:: (fun _ -> assert_equal
		0.406006395912082096
		(poissonc 2. 1));

	"binomial 1" >:: (fun _ -> assert_equal
		0.24609375	
		(binomial 10 0.5 5));

	"binomial 2" >:: (fun _ -> assert_equal
		0.0009765625	
		(binomial 10 0.5 0));

	"binomialc 1" >:: (fun _ -> assert_equal
		0.623046875	
		(binomialc 10 0.5 5));

	"binomialc 2" >:: (fun _ -> assert_equal
		0.0009765625	
		(binomialc 10 0.5 0));

	"binomialc 3" >:: (fun _ -> assert_equal
		0.0009765625	
		(binomial 10 0.5 10));

	"parse_command 1" >:: (fun _ -> assert_equal
		(Unknown "Command not recognized, please try again.")	
		(parse_command {message="";funct=[];data=[]} "a;sldjfl;"));

	"parse_command 2" >:: (fun _ -> assert_equal
		(Unknown "Invalid graphf input. Enter \"graphf help\" for detailed instructions.")	
		(parse_command {message="";funct=[];data=[]} "graphf aaa"));

	"parse_command 3" >:: (fun _ -> assert_equal
		(GraphFunct ([0.], (0., 10.), (0., 10.)))	
		(parse_command {message="";funct=[];data=[]} "graphf y=0 0 10 0 10"));

	"parse_command 4" >:: (fun _ -> assert_equal
		(LinReg [(1., -1.); (2., -2.); (3., -3.)])	
		(parse_command {message="";funct=[];data=[]} "linreg csv.csv"));

	"parse_command 5" >:: (fun _ -> assert_equal
		(Unknown "Invalid linreg input. Enter \"linreg help\" for detailed instructions.")	
		(parse_command {message="";funct=[];data=[]} "linreg aaa.csv"));

	"parse_command 6" >:: (fun _ -> assert_equal
		(PolyReg (2, [(1., -1.); (2., -2.); (3., -3.)]))	
		(parse_command {message="";funct=[];data=[]} "polyreg 2 csv.csv"));

	"parse_command 7" >:: (fun _ -> assert_equal
		(Unknown "Invalid polyreg input. Enter \"polyreg help\" for detailed instructions.")	
		(parse_command {message="";funct=[];data=[]} "polyreg 2 aaa.csv"));

	"parse_command 8" >:: (fun _ -> assert_equal
		(Unknown "Invalid polyreg input. Enter \"polyreg help\" for detailed instructions.")	
		(parse_command {message="";funct=[];data=[]} "polyreg 4 csv.csv"));

	"parse_command 9" >:: (fun _ -> assert_equal
		(Model ([1.; 0.; 2.], 10, 5., (0., 10.)))	
		(parse_command {message="";funct=[];data=[]} "model y=x^2+2 10 5 0 10"));

	"parse_command 10" >:: (fun _ -> assert_equal
		(Unknown "Invalid model input. Enter \"model help\" for detailed instructions.")	
		(parse_command {message="";funct=[];data=[]} "model y=x^2+2 5 0 10"));

	"parse_command 11" >:: (fun _ -> assert_equal
		(GraphFunct ([1.; 0.; 2.], (0., 10.), (0., 10.)))	
		(parse_command {message="";funct=[];data=[]} "graphf y=x^2+2 0 10 0 10"));

	"parse_command 12" >:: (fun _ -> assert_equal
		(Unknown "Invalid graphf input. Enter \"graphf help\" for detailed instructions.")	
		(parse_command {message="";funct=[];data=[]} "graphf y=x^2+2x^3 0 10 0 10"));

	"parse_command 13" >:: (fun _ -> assert_equal
		(GraphData ([(1., -1.); (2., -2.); (3., -3.)], (0., 10.), (0., 10.)))	
		(parse_command {message="";funct=[];data=[]} "graphd csv.csv 0 10 0 10"));

	"parse_command 14" >:: (fun _ -> assert_equal
		(Unknown "Invalid graphd input. Enter \"graphd help\" for detailed instructions.")	
		(parse_command {message="";funct=[];data=[]} "graphd aaa.csv"));

	"parse_command 15" >:: (fun _ -> assert_equal
		(GraphModel ([1.; 0.; 2.], [(1., -1.); (2., -2.); (3., -3.)], (0., 10.), (0., 10.)))	
		(parse_command {message="";funct=[];data=[]} "graphm y=x^2+2 csv.csv 0 10 0 10"));

	"parse_command 16" >:: (fun _ -> assert_equal
		(Unknown "Invalid graphm input. Enter \"graphm help\" for detailed instructions.")	
		(parse_command {message="";funct=[];data=[]} "graphm y=x^2+2 aaa.csv 0 10 0 10"));

	"parse_command 16" >:: (fun _ -> assert_equal
		(Unknown "Invalid graphm input. Enter \"graphm help\" for detailed instructions.")	
		(parse_command {message="";funct=[];data=[]} "graphm y=x^2+2x^3 csv.csv 0 10 0 10"));

	"parse_command 17" >:: (fun _ -> assert_equal
		(PlotRes [(1., -1.); (2., -2.); (3., -3.)])	
		(parse_command {message="";funct=[];data=[]} "plotres csv.csv"));

	"parse_command 18" >:: (fun _ -> assert_equal
		(Unknown "Invalid plotres input. Enter \"plotres help\" for detailed instructions.")	
		(parse_command {message="";funct=[];data=[]} "plotres aaa.csv"));

	"parse_command 19" >:: (fun _ -> assert_equal
		(PlotResf ([1.; 0.; 0.], [(1., -1.); (2., -2.); (3., -3.)]))	
		(parse_command {message="";funct=[];data=[]} "plotres y=x^2 csv.csv"));

	"parse_command 20" >:: (fun _ -> assert_equal
		(Unknown "Invalid plotres input. Enter \"plotres help\" for detailed instructions.")	
		(parse_command {message="";funct=[];data=[]} "plotres y=x^2+x^3 csv.csv"));

	"parse_command 21" >:: (fun _ -> assert_equal
		(Unknown "Invalid plotres input. Enter \"plotres help\" for detailed instructions.")	
		(parse_command {message="";funct=[];data=[]} "plotres y=x^2+x^3 aaa.csv"));

	"parse_command 22" >:: (fun _ -> assert_equal
		(Poisson (5., 2))	
		(parse_command {message="";funct=[];data=[]} "poisson 5 2"));

	"parse_command 23" >:: (fun _ -> assert_equal
		(Unknown "Invalid poisson input. Enter \"poisson help\" for detailed instructions.")	
		(parse_command {message="";funct=[];data=[]} "poisson 0"));

	"parse_command 24" >:: (fun _ -> assert_equal
		(PoissonC (3., 2))	
		(parse_command {message="";funct=[];data=[]} "poissonc 3 2"));

	"parse_command 25" >:: (fun _ -> assert_equal
		(Unknown "Invalid poissonc input. Enter \"poissonc help\" for detailed instructions.")	
		(parse_command {message="";funct=[];data=[]} "poissonc 3"));

	"parse_command 26" >:: (fun _ -> assert_equal
		(Binomial (10, 0.5, 5))	
		(parse_command {message="";funct=[];data=[]} "binomial 10 .5 5"));

	"parse_command 27" >:: (fun _ -> assert_equal
		(Unknown "Invalid binomial input. Enter \"binomial help\" for detailed instructions.")	
		(parse_command {message="";funct=[];data=[]} "binomial 10 5"));

	"parse_command 28" >:: (fun _ -> assert_equal
		(BinomialC (10, 0.5, 5))	
		(parse_command {message="";funct=[];data=[]} "binomialc 10 .5 5")); 

	"parse_command 29" >:: (fun _ -> assert_equal
		(Unknown "Invalid binomialc input. Enter \"binomialc help\" for detailed instructions.")	
		(parse_command {message="";funct=[];data=[]} "binomialc 10 5")); 

	"parse_command 29" >:: (fun _ -> assert_equal
		(Unknown "Invalid binomialc input. Enter \"binomialc help\" for detailed instructions.")	
		(parse_command {message="";funct=[];data=[]} "binomialc 10 5")); 

	"rsq" >:: (fun _ -> assert_equal
		(1.)
		(rsq [(1., -1.); (2., -2.); (3., -3.)]));

	"rsq 2" >:: (fun _ -> assert_equal
		(0.734882147178251843)
		(rsq [(1.,67.);(1.,62.);(2.,109.);(2.,83.);
		(2.,91.);(2.,88.);(3.,137.);(3.,131.);(3.,122.);(3.,122.);
		(3.,118.);(3.,115.);(3.,131.);(3.,143.);(3.,142.);(2.,123.);
		(3.,122.);(4.,138.);(4.,135.);(4.,146.);(4.,146.);(4.,145.);
		(4.,145.);(4.,144.);(4.,140.);(4.,150.);(4.,152.);(4.,157.);
		(4.,155.);(4.,153.);(4.,154.);(4.,158.);(4.,162.);(4.,161.);
		(4.,162.);(4.,165.);(4.,171.);(5.,171.);(4.,162.);(4.,169.);
		(4.,167.);(5.,188.);(2.,100.);(2.,109.);(4.,150.);(3.,140.);
		(4.,170.);(3.,150.);(4.,140.);(4.,140.);(4.,150.);(4.,150.);
		(3.,140.);(3.,150.);(3.,150.);(4.,150.);(4.,160.);(3.,140.);
		(4.,150.);(5.,170.);(4.,150.);(5.,150.);(4.,150.);(4.,150.);
		(3.,150.);(5.,150.);(5.,160.);(4.,140.);(5.,160.);(3.,130.);
		(4.,160.);(3.,130.);(4.,170.);(6.,170.);(4.,160.);(5.,180.);
		(4.,160.);(4.,170.)]));

	"residuals 1" >:: (fun _ -> assert_equal
		([-17.9612778315585615; -22.9612778315585615; 1.72642787996127822;            
		-24.2735721200387218; -16.2735721200387218; -19.2735721200387218;                
		 7.41413359148111795; 1.41413359148111795; -7.58586640851888205;
		 -7.58586640851888205; -11.5858664085188821; -14.5858664085188821;
		 1.41413359148111795; 13.4141335914811179; 12.4141335914811179;
		 15.7264278799612782; -7.58586640851888205; -13.8981606969990139;
		 -16.8981606969990139; -5.89816069699901391; -5.89816069699901391;
		 -6.89816069699901391; -6.89816069699901391; -7.89816069699901391;
		 -11.8981606969990139; -1.89816069699901391; 0.101839303000986092;
		 5.10183930300098609; 3.10183930300098609; 1.10183930300098609;
		 2.10183930300098609; 6.10183930300098609; 10.1018393030009861;
		 9.10183930300098609; 10.1018393030009861; 13.1018393030009861;
		 19.1018393030009861; -3.21045498547920261; 10.1018393030009861;
		 17.1018393030009861; 15.1018393030009861; 13.7895450145207974;
		 -7.27357212003872178; 1.72642787996127822; -1.89816069699901391;
		 10.4141335914811179; 18.1018393030009861; 20.4141335914811179;
		 -11.8981606969990139; -11.8981606969990139; -1.89816069699901391;
		 -1.89816069699901391; 10.4141335914811179; 20.4141335914811179;
		 20.4141335914811179; -1.89816069699901391; 8.10183930300098609;
		 10.4141335914811179; -1.89816069699901391; -4.21045498547920261;
		 -1.89816069699901391; -24.2104549854792026; -1.89816069699901391;
		 -1.89816069699901391; 20.4141335914811179; -24.2104549854792026;
		 -14.2104549854792026; -11.8981606969990139; -14.2104549854792026;
		 0.414133591481117946; 8.10183930300098609; 0.414133591481117946;
		 18.1018393030009861; -26.5227492739593345; 8.10183930300098609;
		 5.78954501452079739; 8.10183930300098609; 18.1018393030009861])
		(residuals [(1.,67.);(1.,62.);(2.,109.);(2.,83.);
		(2.,91.);(2.,88.);(3.,137.);(3.,131.);(3.,122.);(3.,122.);
		(3.,118.);(3.,115.);(3.,131.);(3.,143.);(3.,142.);(2.,123.);
		(3.,122.);(4.,138.);(4.,135.);(4.,146.);(4.,146.);(4.,145.);
		(4.,145.);(4.,144.);(4.,140.);(4.,150.);(4.,152.);(4.,157.);
		(4.,155.);(4.,153.);(4.,154.);(4.,158.);(4.,162.);(4.,161.);
		(4.,162.);(4.,165.);(4.,171.);(5.,171.);(4.,162.);(4.,169.);
		(4.,167.);(5.,188.);(2.,100.);(2.,109.);(4.,150.);(3.,140.);
		(4.,170.);(3.,150.);(4.,140.);(4.,140.);(4.,150.);(4.,150.);
		(3.,140.);(3.,150.);(3.,150.);(4.,150.);(4.,160.);(3.,140.);
		(4.,150.);(5.,170.);(4.,150.);(5.,150.);(4.,150.);(4.,150.);
		(3.,150.);(5.,150.);(5.,160.);(4.,140.);(5.,160.);(3.,130.);
		(4.,160.);(3.,130.);(4.,170.);(6.,170.);(4.,160.);(5.,180.);
		(4.,160.);(4.,170.)]));

	"residuals 2" >:: (fun _ -> assert_raises
		(Illegal)
		(res));

	"residuals 3" >:: (fun _ -> assert_equal
		([64.; 59.; 104.; 78.; 86.; 83.; 130.; 124.; 115.; 115.; 111.; 108.; 124.; 136.;
		 135.; 118.; 115.; 129.; 126.; 137.; 137.; 136.; 136.; 135.; 131.; 141.; 143.;    
		 148.; 146.; 144.; 145.; 149.; 153.; 152.; 153.; 156.; 162.; 160.; 153.; 160.;
		 158.; 177.; 95.; 104.; 141.; 133.; 161.; 143.; 131.; 131.; 141.; 141.; 133.;
		 143.; 143.; 141.; 151.; 133.; 141.; 159.; 141.; 139.; 141.; 141.; 143.; 139.;
		 149.; 131.; 149.; 123.; 151.; 123.; 161.; 157.; 151.; 169.; 151.; 161.])
		(residuals ~func:[2.;1.] [(1.,67.);(1.,62.);(2.,109.);(2.,83.);
		(2.,91.);(2.,88.);(3.,137.);(3.,131.);(3.,122.);(3.,122.);
		(3.,118.);(3.,115.);(3.,131.);(3.,143.);(3.,142.);(2.,123.);
		(3.,122.);(4.,138.);(4.,135.);(4.,146.);(4.,146.);(4.,145.);
		(4.,145.);(4.,144.);(4.,140.);(4.,150.);(4.,152.);(4.,157.);
		(4.,155.);(4.,153.);(4.,154.);(4.,158.);(4.,162.);(4.,161.);
		(4.,162.);(4.,165.);(4.,171.);(5.,171.);(4.,162.);(4.,169.);
		(4.,167.);(5.,188.);(2.,100.);(2.,109.);(4.,150.);(3.,140.);
		(4.,170.);(3.,150.);(4.,140.);(4.,140.);(4.,150.);(4.,150.);
		(3.,140.);(3.,150.);(3.,150.);(4.,150.);(4.,160.);(3.,140.);
		(4.,150.);(5.,170.);(4.,150.);(5.,150.);(4.,150.);(4.,150.);
		(3.,150.);(5.,150.);(5.,160.);(4.,140.);(5.,160.);(3.,130.);
		(4.,160.);(3.,130.);(4.,170.);(6.,170.);(4.,160.);(5.,180.);
		(4.,160.);(4.,170.)]));

	"residuals 3" >:: (fun _ -> assert_equal
		([63.; 58.; 96.; 70.; 78.; 75.; 109.; 103.; 94.; 94.; 90.; 87.; 103.; 115.;         
		114.; 110.; 94.; 89.; 86.; 97.; 97.; 96.; 96.; 95.; 91.; 101.; 103.; 108.;       
		 106.; 104.; 105.; 109.; 113.; 112.; 113.; 116.; 122.; 95.; 113.; 120.; 118.;
		 112.; 87.; 96.; 101.; 112.; 121.; 122.; 91.; 91.; 101.; 101.; 112.; 122.;
		 122.; 101.; 111.; 112.; 101.; 94.; 101.; 74.; 101.; 101.; 122.; 74.; 84.; 91.;
		 84.; 102.; 111.; 102.; 121.; 61.; 111.; 104.; 111.; 121.])
		(residuals ~func:[3.;0.;1.] [(1.,67.);(1.,62.);(2.,109.);(2.,83.);
		(2.,91.);(2.,88.);(3.,137.);(3.,131.);(3.,122.);(3.,122.);
		(3.,118.);(3.,115.);(3.,131.);(3.,143.);(3.,142.);(2.,123.);
		(3.,122.);(4.,138.);(4.,135.);(4.,146.);(4.,146.);(4.,145.);
		(4.,145.);(4.,144.);(4.,140.);(4.,150.);(4.,152.);(4.,157.);
		(4.,155.);(4.,153.);(4.,154.);(4.,158.);(4.,162.);(4.,161.);
		(4.,162.);(4.,165.);(4.,171.);(5.,171.);(4.,162.);(4.,169.);
		(4.,167.);(5.,188.);(2.,100.);(2.,109.);(4.,150.);(3.,140.);
		(4.,170.);(3.,150.);(4.,140.);(4.,140.);(4.,150.);(4.,150.);
		(3.,140.);(3.,150.);(3.,150.);(4.,150.);(4.,160.);(3.,140.);
		(4.,150.);(5.,170.);(4.,150.);(5.,150.);(4.,150.);(4.,150.);
		(3.,150.);(5.,150.);(5.,160.);(4.,140.);(5.,160.);(3.,130.);
		(4.,160.);(3.,130.);(4.,170.);(6.,170.);(4.,160.);(5.,180.);
		(4.,160.);(4.,170.)]));

	"residuals 4" >:: (fun _ -> assert_equal
		([57.; 52.; 60.; 34.; 42.; 39.; -5.; -11.; -20.; -20.; -24.; -27.; -11.; 1.; 0.;    
		74.; -20.; -175.; -178.; -167.; -167.; -168.; -168.; -169.; -173.; -163.;        
		 -161.; -156.; -158.; -160.; -159.; -155.; -151.; -152.; -151.; -148.; -142.;
		 -415.; -151.; -144.; -146.; -398.; 51.; 60.; -163.; -2.; -143.; 8.; -173.;
		 -173.; -163.; -163.; -2.; 8.; 8.; -163.; -153.; -2.; -163.; -416.; -163.;
		 -436.; -163.; -163.; 8.; -436.; -426.; -173.; -426.; -12.; -153.; -12.; -143.;
		 -815.; -153.; -406.; -153.; -143.])
		(residuals ~func:[4.;3.;2.;1.] [(1.,67.);(1.,62.);(2.,109.);(2.,83.);
		(2.,91.);(2.,88.);(3.,137.);(3.,131.);(3.,122.);(3.,122.);
		(3.,118.);(3.,115.);(3.,131.);(3.,143.);(3.,142.);(2.,123.);
		(3.,122.);(4.,138.);(4.,135.);(4.,146.);(4.,146.);(4.,145.);
		(4.,145.);(4.,144.);(4.,140.);(4.,150.);(4.,152.);(4.,157.);
		(4.,155.);(4.,153.);(4.,154.);(4.,158.);(4.,162.);(4.,161.);
		(4.,162.);(4.,165.);(4.,171.);(5.,171.);(4.,162.);(4.,169.);
		(4.,167.);(5.,188.);(2.,100.);(2.,109.);(4.,150.);(3.,140.);
		(4.,170.);(3.,150.);(4.,140.);(4.,140.);(4.,150.);(4.,150.);
		(3.,140.);(3.,150.);(3.,150.);(4.,150.);(4.,160.);(3.,140.);
		(4.,150.);(5.,170.);(4.,150.);(5.,150.);(4.,150.);(4.,150.);
		(3.,150.);(5.,150.);(5.,160.);(4.,140.);(5.,160.);(3.,130.);
		(4.,160.);(3.,130.);(4.,170.);(6.,170.);(4.,160.);(5.,180.);
		(4.,160.);(4.,170.)]));

"residuals_plot 1" >:: (fun _ -> assert_equal
		([(1., -17.9612778315585615); (1., -22.9612778315585615);                           
		(2., 1.72642787996127822); (2., -24.2735721200387218);                           
		 (2., -16.2735721200387218); (2., -19.2735721200387218);
		 (3., 7.41413359148111795); (3., 1.41413359148111795);
		 (3., -7.58586640851888205); (3., -7.58586640851888205);
		 (3., -11.5858664085188821); (3., -14.5858664085188821);
		 (3., 1.41413359148111795); (3., 13.4141335914811179);
		 (3., 12.4141335914811179); (2., 15.7264278799612782);
		 (3., -7.58586640851888205); (4., -13.8981606969990139);
		 (4., -16.8981606969990139); (4., -5.89816069699901391);
		 (4., -5.89816069699901391); (4., -6.89816069699901391);
		 (4., -6.89816069699901391); (4., -7.89816069699901391);
		 (4., -11.8981606969990139); (4., -1.89816069699901391);
		 (4., 0.101839303000986092); (4., 5.10183930300098609);
		 (4., 3.10183930300098609); (4., 1.10183930300098609);
		 (4., 2.10183930300098609); (4., 6.10183930300098609);
		 (4., 10.1018393030009861); (4., 9.10183930300098609);
		 (4., 10.1018393030009861); (4., 13.1018393030009861);
		 (4., 19.1018393030009861); (5., -3.21045498547920261);
		 (4., 10.1018393030009861); (4., 17.1018393030009861);
		 (4., 15.1018393030009861); (5., 13.7895450145207974);
		 (2., -7.27357212003872178); (2., 1.72642787996127822);
		 (4., -1.89816069699901391); (3., 10.4141335914811179);
		 (4., 18.1018393030009861); (3., 20.4141335914811179);
		 (4., -11.8981606969990139); (4., -11.8981606969990139);
		 (4., -1.89816069699901391); (4., -1.89816069699901391);
		 (3., 10.4141335914811179); (3., 20.4141335914811179);
		 (3., 20.4141335914811179); (4., -1.89816069699901391);
		 (4., 8.10183930300098609); (3., 10.4141335914811179);
		 (4., -1.89816069699901391); (5., -4.21045498547920261);
		 (4., -1.89816069699901391); (5., -24.2104549854792026);
		 (4., -1.89816069699901391); (4., -1.89816069699901391);
		 (3., 20.4141335914811179); (5., -24.2104549854792026);
		 (5., -14.2104549854792026); (4., -11.8981606969990139);
		 (5., -14.2104549854792026); (3., 0.414133591481117946);
		 (4., 8.10183930300098609); (3., 0.414133591481117946);
		 (4., 18.1018393030009861); (6., -26.5227492739593345);
		 (4., 8.10183930300098609); (5., 5.78954501452079739);
		 (4., 8.10183930300098609); (4., 18.1018393030009861)])
		(residuals_plot [(1.,67.);(1.,62.);(2.,109.);(2.,83.);
		(2.,91.);(2.,88.);(3.,137.);(3.,131.);(3.,122.);(3.,122.);
		(3.,118.);(3.,115.);(3.,131.);(3.,143.);(3.,142.);(2.,123.);
		(3.,122.);(4.,138.);(4.,135.);(4.,146.);(4.,146.);(4.,145.);
		(4.,145.);(4.,144.);(4.,140.);(4.,150.);(4.,152.);(4.,157.);
		(4.,155.);(4.,153.);(4.,154.);(4.,158.);(4.,162.);(4.,161.);
		(4.,162.);(4.,165.);(4.,171.);(5.,171.);(4.,162.);(4.,169.);
		(4.,167.);(5.,188.);(2.,100.);(2.,109.);(4.,150.);(3.,140.);
		(4.,170.);(3.,150.);(4.,140.);(4.,140.);(4.,150.);(4.,150.);
		(3.,140.);(3.,150.);(3.,150.);(4.,150.);(4.,160.);(3.,140.);
		(4.,150.);(5.,170.);(4.,150.);(5.,150.);(4.,150.);(4.,150.);
		(3.,150.);(5.,150.);(5.,160.);(4.,140.);(5.,160.);(3.,130.);
		(4.,160.);(3.,130.);(4.,170.);(6.,170.);(4.,160.);(5.,180.);
		(4.,160.);(4.,170.)]));

	"residuals_plot 2" >:: (fun _ -> assert_equal
		([(1., 57.); (1., 52.); (2., 60.); (2., 34.); (2., 42.); (2., 39.); (3., -5.);      
		(3., -11.); (3., -20.); (3., -20.); (3., -24.); (3., -27.); (3., -11.);          
		 (3., 1.); (3., 0.); (2., 74.); (3., -20.); (4., -175.); (4., -178.);
		 (4., -167.); (4., -167.); (4., -168.); (4., -168.); (4., -169.); (4., -173.);
		 (4., -163.); (4., -161.); (4., -156.); (4., -158.); (4., -160.); (4., -159.);
		 (4., -155.); (4., -151.); (4., -152.); (4., -151.); (4., -148.); (4., -142.);
		 (5., -415.); (4., -151.); (4., -144.); (4., -146.); (5., -398.); (2., 51.);
		 (2., 60.); (4., -163.); (3., -2.); (4., -143.); (3., 8.); (4., -173.);
		 (4., -173.); (4., -163.); (4., -163.); (3., -2.); (3., 8.); (3., 8.);
		 (4., -163.); (4., -153.); (3., -2.); (4., -163.); (5., -416.); (4., -163.);
		 (5., -436.); (4., -163.); (4., -163.); (3., 8.); (5., -436.); (5., -426.);
		 (4., -173.); (5., -426.); (3., -12.); (4., -153.); (3., -12.); (4., -143.);
		 (6., -815.); (4., -153.); (5., -406.); (4., -153.); (4., -143.)])
		(residuals_plot ~func:[4.;3.;2.;1.] [(1.,67.);(1.,62.);(2.,109.);(2.,83.);
		(2.,91.);(2.,88.);(3.,137.);(3.,131.);(3.,122.);(3.,122.);
		(3.,118.);(3.,115.);(3.,131.);(3.,143.);(3.,142.);(2.,123.);
		(3.,122.);(4.,138.);(4.,135.);(4.,146.);(4.,146.);(4.,145.);
		(4.,145.);(4.,144.);(4.,140.);(4.,150.);(4.,152.);(4.,157.);
		(4.,155.);(4.,153.);(4.,154.);(4.,158.);(4.,162.);(4.,161.);
		(4.,162.);(4.,165.);(4.,171.);(5.,171.);(4.,162.);(4.,169.);
		(4.,167.);(5.,188.);(2.,100.);(2.,109.);(4.,150.);(3.,140.);
		(4.,170.);(3.,150.);(4.,140.);(4.,140.);(4.,150.);(4.,150.);
		(3.,140.);(3.,150.);(3.,150.);(4.,150.);(4.,160.);(3.,140.);
		(4.,150.);(5.,170.);(4.,150.);(5.,150.);(4.,150.);(4.,150.);
		(3.,150.);(5.,150.);(5.,160.);(4.,140.);(5.,160.);(3.,130.);
		(4.,160.);(3.,130.);(4.,170.);(6.,170.);(4.,160.);(5.,180.);
		(4.,160.);(4.,170.)]));

	"variance 1" >:: (fun _ -> assert_equal
		(154.45242579298727)
		(variance [(1.,67.);(1.,62.);(2.,109.);(2.,83.);
		(2.,91.);(2.,88.);(3.,137.);(3.,131.);(3.,122.);(3.,122.);
		(3.,118.);(3.,115.);(3.,131.);(3.,143.);(3.,142.);(2.,123.);
		(3.,122.);(4.,138.);(4.,135.);(4.,146.);(4.,146.);(4.,145.);
		(4.,145.);(4.,144.);(4.,140.);(4.,150.);(4.,152.);(4.,157.);
		(4.,155.);(4.,153.);(4.,154.);(4.,158.);(4.,162.);(4.,161.);
		(4.,162.);(4.,165.);(4.,171.);(5.,171.);(4.,162.);(4.,169.);
		(4.,167.);(5.,188.);(2.,100.);(2.,109.);(4.,150.);(3.,140.);
		(4.,170.);(3.,150.);(4.,140.);(4.,140.);(4.,150.);(4.,150.);
		(3.,140.);(3.,150.);(3.,150.);(4.,150.);(4.,160.);(3.,140.);
		(4.,150.);(5.,170.);(4.,150.);(5.,150.);(4.,150.);(4.,150.);
		(3.,150.);(5.,150.);(5.,160.);(4.,140.);(5.,160.);(3.,130.);
		(4.,160.);(3.,130.);(4.,170.);(6.,170.);(4.,160.);(5.,180.);
		(4.,160.);(4.,170.)]));

	"variance 2" >:: (fun _ -> assert_equal
		(40877.4025974026)
		(variance ~func:[4.;3.;2.;1.] [(1.,67.);(1.,62.);(2.,109.);(2.,83.);
		(2.,91.);(2.,88.);(3.,137.);(3.,131.);(3.,122.);(3.,122.);
		(3.,118.);(3.,115.);(3.,131.);(3.,143.);(3.,142.);(2.,123.);
		(3.,122.);(4.,138.);(4.,135.);(4.,146.);(4.,146.);(4.,145.);
		(4.,145.);(4.,144.);(4.,140.);(4.,150.);(4.,152.);(4.,157.);
		(4.,155.);(4.,153.);(4.,154.);(4.,158.);(4.,162.);(4.,161.);
		(4.,162.);(4.,165.);(4.,171.);(5.,171.);(4.,162.);(4.,169.);
		(4.,167.);(5.,188.);(2.,100.);(2.,109.);(4.,150.);(3.,140.);
		(4.,170.);(3.,150.);(4.,140.);(4.,140.);(4.,150.);(4.,150.);
		(3.,140.);(3.,150.);(3.,150.);(4.,150.);(4.,160.);(3.,140.);
		(4.,150.);(5.,170.);(4.,150.);(5.,150.);(4.,150.);(4.,150.);
		(3.,150.);(5.,150.);(5.,160.);(4.,140.);(5.,160.);(3.,130.);
		(4.,160.);(3.,130.);(4.,170.);(6.,170.);(4.,160.);(5.,180.);
		(4.,160.);(4.,170.)]));

	"stderror 1" >:: (fun _ -> assert_equal
		(12.3479660870909811)
		(stderror [(1.,67.);(1.,62.);(2.,109.);(2.,83.);
		(2.,91.);(2.,88.);(3.,137.);(3.,131.);(3.,122.);(3.,122.);
		(3.,118.);(3.,115.);(3.,131.);(3.,143.);(3.,142.);(2.,123.);
		(3.,122.);(4.,138.);(4.,135.);(4.,146.);(4.,146.);(4.,145.);
		(4.,145.);(4.,144.);(4.,140.);(4.,150.);(4.,152.);(4.,157.);
		(4.,155.);(4.,153.);(4.,154.);(4.,158.);(4.,162.);(4.,161.);
		(4.,162.);(4.,165.);(4.,171.);(5.,171.);(4.,162.);(4.,169.);
		(4.,167.);(5.,188.);(2.,100.);(2.,109.);(4.,150.);(3.,140.);
		(4.,170.);(3.,150.);(4.,140.);(4.,140.);(4.,150.);(4.,150.);
		(3.,140.);(3.,150.);(3.,150.);(4.,150.);(4.,160.);(3.,140.);
		(4.,150.);(5.,170.);(4.,150.);(5.,150.);(4.,150.);(4.,150.);
		(3.,150.);(5.,150.);(5.,160.);(4.,140.);(5.,160.);(3.,130.);
		(4.,160.);(3.,130.);(4.,170.);(6.,170.);(4.,160.);(5.,180.);
		(4.,160.);(4.,170.)]));

	"stderror 2" >:: (fun _ -> assert_equal
		(200.8813912071831)
		(stderror ~func:[4.;3.;2.;1.] [(1.,67.);(1.,62.);(2.,109.);(2.,83.);
		(2.,91.);(2.,88.);(3.,137.);(3.,131.);(3.,122.);(3.,122.);
		(3.,118.);(3.,115.);(3.,131.);(3.,143.);(3.,142.);(2.,123.);
		(3.,122.);(4.,138.);(4.,135.);(4.,146.);(4.,146.);(4.,145.);
		(4.,145.);(4.,144.);(4.,140.);(4.,150.);(4.,152.);(4.,157.);
		(4.,155.);(4.,153.);(4.,154.);(4.,158.);(4.,162.);(4.,161.);
		(4.,162.);(4.,165.);(4.,171.);(5.,171.);(4.,162.);(4.,169.);
		(4.,167.);(5.,188.);(2.,100.);(2.,109.);(4.,150.);(3.,140.);
		(4.,170.);(3.,150.);(4.,140.);(4.,140.);(4.,150.);(4.,150.);
		(3.,140.);(3.,150.);(3.,150.);(4.,150.);(4.,160.);(3.,140.);
		(4.,150.);(5.,170.);(4.,150.);(5.,150.);(4.,150.);(4.,150.);
		(3.,150.);(5.,150.);(5.,160.);(4.,140.);(5.,160.);(3.,130.);
		(4.,160.);(3.,130.);(4.,170.);(6.,170.);(4.,160.);(5.,180.);
		(4.,160.);(4.,170.)]));

	"stddev 1" >:: (fun _ -> assert_equal
		(12.4278890320515529)
		(stddev [(1.,67.);(1.,62.);(2.,109.);(2.,83.);
		(2.,91.);(2.,88.);(3.,137.);(3.,131.);(3.,122.);(3.,122.);
		(3.,118.);(3.,115.);(3.,131.);(3.,143.);(3.,142.);(2.,123.);
		(3.,122.);(4.,138.);(4.,135.);(4.,146.);(4.,146.);(4.,145.);
		(4.,145.);(4.,144.);(4.,140.);(4.,150.);(4.,152.);(4.,157.);
		(4.,155.);(4.,153.);(4.,154.);(4.,158.);(4.,162.);(4.,161.);
		(4.,162.);(4.,165.);(4.,171.);(5.,171.);(4.,162.);(4.,169.);
		(4.,167.);(5.,188.);(2.,100.);(2.,109.);(4.,150.);(3.,140.);
		(4.,170.);(3.,150.);(4.,140.);(4.,140.);(4.,150.);(4.,150.);
		(3.,140.);(3.,150.);(3.,150.);(4.,150.);(4.,160.);(3.,140.);
		(4.,150.);(5.,170.);(4.,150.);(5.,150.);(4.,150.);(4.,150.);
		(3.,150.);(5.,150.);(5.,160.);(4.,140.);(5.,160.);(3.,130.);
		(4.,160.);(3.,130.);(4.,170.);(6.,170.);(4.,160.);(5.,180.);
		(4.,160.);(4.,170.)]));

	"stddev 2" >:: (fun _ -> assert_equal
		(202.18160796027567)
		(stddev ~func:[4.;3.;2.;1.] [(1.,67.);(1.,62.);(2.,109.);(2.,83.);
		(2.,91.);(2.,88.);(3.,137.);(3.,131.);(3.,122.);(3.,122.);
		(3.,118.);(3.,115.);(3.,131.);(3.,143.);(3.,142.);(2.,123.);
		(3.,122.);(4.,138.);(4.,135.);(4.,146.);(4.,146.);(4.,145.);
		(4.,145.);(4.,144.);(4.,140.);(4.,150.);(4.,152.);(4.,157.);
		(4.,155.);(4.,153.);(4.,154.);(4.,158.);(4.,162.);(4.,161.);
		(4.,162.);(4.,165.);(4.,171.);(5.,171.);(4.,162.);(4.,169.);
		(4.,167.);(5.,188.);(2.,100.);(2.,109.);(4.,150.);(3.,140.);
		(4.,170.);(3.,150.);(4.,140.);(4.,140.);(4.,150.);(4.,150.);
		(3.,140.);(3.,150.);(3.,150.);(4.,150.);(4.,160.);(3.,140.);
		(4.,150.);(5.,170.);(4.,150.);(5.,150.);(4.,150.);(4.,150.);
		(3.,150.);(5.,150.);(5.,160.);(4.,140.);(5.,160.);(3.,130.);
		(4.,160.);(3.,130.);(4.,170.);(6.,170.);(4.,160.);(5.,180.);
		(4.,160.);(4.,170.)]));

	"chisq 1" >:: (fun _ -> assert_equal
		(92.5410507728978757)
		(chisq [(1.,67.);(1.,62.);(2.,109.);(2.,83.);
		(2.,91.);(2.,88.);(3.,137.);(3.,131.);(3.,122.);(3.,122.);
		(3.,118.);(3.,115.);(3.,131.);(3.,143.);(3.,142.);(2.,123.);
		(3.,122.);(4.,138.);(4.,135.);(4.,146.);(4.,146.);(4.,145.);
		(4.,145.);(4.,144.);(4.,140.);(4.,150.);(4.,152.);(4.,157.);
		(4.,155.);(4.,153.);(4.,154.);(4.,158.);(4.,162.);(4.,161.);
		(4.,162.);(4.,165.);(4.,171.);(5.,171.);(4.,162.);(4.,169.);
		(4.,167.);(5.,188.);(2.,100.);(2.,109.);(4.,150.);(3.,140.);
		(4.,170.);(3.,150.);(4.,140.);(4.,140.);(4.,150.);(4.,150.);
		(3.,140.);(3.,150.);(3.,150.);(4.,150.);(4.,160.);(3.,140.);
		(4.,150.);(5.,170.);(4.,150.);(5.,150.);(4.,150.);(4.,150.);
		(3.,150.);(5.,150.);(5.,160.);(4.,140.);(5.,160.);(3.,130.);
		(4.,160.);(3.,130.);(4.,170.);(6.,170.);(4.,160.);(5.,180.);
		(4.,160.);(4.,170.)]));

	"stddev 2" >:: (fun _ -> assert_equal
		(19658.6556283658283)
		(chisq ~func:[4.;3.;2.;1.] [(1.,67.);(1.,62.);(2.,109.);(2.,83.);
		(2.,91.);(2.,88.);(3.,137.);(3.,131.);(3.,122.);(3.,122.);
		(3.,118.);(3.,115.);(3.,131.);(3.,143.);(3.,142.);(2.,123.);
		(3.,122.);(4.,138.);(4.,135.);(4.,146.);(4.,146.);(4.,145.);
		(4.,145.);(4.,144.);(4.,140.);(4.,150.);(4.,152.);(4.,157.);
		(4.,155.);(4.,153.);(4.,154.);(4.,158.);(4.,162.);(4.,161.);
		(4.,162.);(4.,165.);(4.,171.);(5.,171.);(4.,162.);(4.,169.);
		(4.,167.);(5.,188.);(2.,100.);(2.,109.);(4.,150.);(3.,140.);
		(4.,170.);(3.,150.);(4.,140.);(4.,140.);(4.,150.);(4.,150.);
		(3.,140.);(3.,150.);(3.,150.);(4.,150.);(4.,160.);(3.,140.);
		(4.,150.);(5.,170.);(4.,150.);(5.,150.);(4.,150.);(4.,150.);
		(3.,150.);(5.,150.);(5.,160.);(4.,140.);(5.,160.);(3.,130.);
		(4.,160.);(3.,130.);(4.,170.);(6.,170.);(4.,160.);(5.,180.);
		(4.,160.);(4.,170.)]));

	"eval 1" >:: (fun _ -> assert_equal
		({message = "r^2 = 1."; funct = []; data = [(1., -1.); (2., -2.); (3., -3.)]})	
		(eval {message="";funct=[];data=[]} "rsq csv.csv"));

	"eval 2" >:: (fun _ -> assert_equal
		({message = "y = -1. x + 0."; funct = [-1.; 0.];                                      
			data = [(1., -1.); (2., -2.); (3., -3.)]})	
		(eval {message="";funct=[];data=[]} "linreg csv.csv"));

	"eval 3" >:: (fun _ -> assert_equal
		({message = "Graph has been saved as graph1.png"; funct = [1.; 2.; 0.; -1.];          
			data = [(1., -1.); (2., -2.); (3., -3.)]})	
		(eval {message="";funct=[];data=[]} "graphm y=x^3+2x^2-1 csv.csv 0 10 0 10"));

	"eval 4" >:: (fun _ -> assert_equal
		({message = "y = -1. x + 0."; funct = [-1.; 0.];          
			data = [(1., -1.); (2., -2.); (3., -3.)]})	
		(eval {message = "Graph has been saved as graph2.png"; funct = [1.; 2.; 0.; -1.];          
			data = [(1., -1.); (2., -2.); (3., -3.)]} "linreg dataset"));		
]


let _ = run_test_tt_main tests

